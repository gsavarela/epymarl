# --- NTWA2C specific parameters ---
hidden_dim: 128 # MPE
lr: 0.0005 # MPE
standardise_rewards: True # MPE
entropy_coef: 0.01  # MPE
q_nstep: 10 # MPE: 1 corresponds to normal r + gammaV
# update the target network every {} training steps
target_update_interval_or_tau: 0.01 # MPE
use_rnn: False # MPE

# hidden_dim: 64 # LBF
# lr: 0.0005 # LBF
# use_rnn: True
# standardise_rewards: True
# entropy_coef: 0.01
# # update the target network every {} training steps
# target_update_interval_or_tau: 0.01 # LBF
# q_nstep: 5 # 1 corresponds to normal r + gammaV

action_selector: "soft_policies"
mask_before_softmax: True


runner: "parallel"
buffer_size: 10
batch_size_run: 10
batch_size: 10

env_args:
  state_last_action: False # critic adds last action internally
  joint_rewards: False
  # time_limit: 25 # MPE
  time_limit: 1000 # AdversarialNavigation
  
obs_agent_id: False
obs_last_action: False
obs_individual_obs: False

mac: "dac"
agent: "rnn_ns"
agent_output_type: "pi_logits"
learner: "actor_critic_adversarial_networked_learner"
standardise_returns: False
critic_type: "ac_critic_networked" # All weights begin at the same place.

# Networked agents
networked_edges: 1
networked_rounds: 10
networked_interval: 10 # Try consensus at every networked_interval number of training steps.

# networked_edges: 0
# networked_rounds: 10  # At each consensus round try this many consensus matrices.
# networked_interval: 5 # Try consensus at every networked_interval number of training steps.

# Adversarial agents
networked_adversaries: 0
networked_adversarial_noise: 0

name: "ntwa2c_adv"
t_max: 5_005_000  # ADVNAV
#  t_max: 40_050_000 # LBF
# t_max: 20_050_000 # MPE
